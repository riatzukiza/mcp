{:mcp-servers
 {:github
  {:command "/home/err/devel/promethean/scripts/mcp/bin/github.sh"}

  :github-chat
  {:command "/home/err/devel/promethean/scripts/mcp/bin/github_chat.sh"}

  :file-system
  {:command "/home/err/devel/promethean/scripts/mcp/bin/filesystem.sh"}

  :npm-helper
  {:command "npx"
   :args ["-y" "@pinkpixel/npm-helper-mcp"]
   :cwd "$HOME/devel/promethean"}

  ;; :eslint-official
  ;; {:command "npx"
  ;;  :args ["-y" "@eslint/mcp@latest"]}

  :eslint
  {:command "npx"
   :args ["-y" "@uplinq/mcp-eslint"]
   :cwd "$HOME/devel/promethean"}


  }

 :http
 {:transport :http
  :base-url "http://127.0.0.1:3210"
  :tools ["mcp.help" "mcp.toolset" "mcp.endpoints" "mcp.validate-config"
         "github.request" "github.graphql" "github.rate-limit" "github.contents.write"
         "github.pr.get" "github.pr.files" "github.pr.resolvePosition" "github.pr.review.start"
         "github.pr.review.commentInline" "github.pr.review.submit"
         "files.list-directory" "files.tree-directory" "files.view-file" "files.write-content"
         "files.write-lines" "files.search" "apply_patch"
         "tdd.scaffoldTest" "tdd.changedFiles" "tdd.runTests" "tdd.startWatch" "tdd.getWatchChanges"
         "tdd.stopWatch" "tdd.coverage" "tdd.propertyCheck" "tdd.mutationScore"
         "exec.list" "exec.run"
         "discord.send-message" "discord.list-messages"
         "pnpm.install" "pnpm.add" "pnpm.remove" "pnpm.runScript"]
  :include-help? true
  :endpoints
  {:discord
   {:tools ["discord.send-message" "discord.list-messages"]
    :include-help? true}
   :exec
   {:tools ["exec.list" "exec.run"]
    :include-help? true}
   :files
   {:tools ["files.list-directory" "files.tree-directory" "files.view-file" "files.write-content" "files.write-lines" "files.search" "apply_patch"]
    :include-help? true}
   :github
   {:tools ["github.request" "github.graphql" "github.rate-limit" "github.contents.write"]
    :include-help? true}
   :github/review
   {:tools ["github.pr.get" "github.pr.files" "github.pr.resolvePosition" "github.pr.review.start"
            "github.pr.review.commentInline" "github.pr.review.submit"
            "github.review.openPullRequest"
            "github.review.getComments" "github.review.getReviewComments"
            "github.review.submitComment" "github.review.submitReview" "github.review.getActionStatus"
            "github.review.commit" "github.review.push" "github.review.checkoutBranch" "github.review.createBranch"
            "github.review.revertCommits" "github.review.requestChangesFromCodex"]
    :include-help? true}
   :kanban
   {:tools ["kanban.get-board" "kanban.get-column" "kanban.find-task" "kanban.find-task-by-title"
            "kanban.update-status" "kanban.move-task" "kanban.sync-board" "kanban.search"]
    :include-help? true}
   :process
   {:tools ["process.getTaskRunnerConfig" "process.updateTaskRunnerConfig" "process.enqueueTask"
            "process.stop" "process.getQueue" "process.getStdout" "process.getStderr"]
    :include-help? true}
   :workspace
   {:tools ["pnpm.install" "pnpm.add" "pnpm.remove" "pnpm.runScript"]
    :include-help? true}}
  :stdio-meta
  {:title "Default MCP Endpoint"
   :description "Aggregated toolset available over stdio for local agents."
   :workflow ["mcp.toolset -> mcp.help" "mcp.validate-config" "files.search -> files.view-file -> apply_patch"]
   :expectations
   {:usage ["Use mcp.toolset first to confirm endpoint scope"
            "Call mcp.validate-config after editing promethan.mcp.json"
            "Prefer files.write-lines for small edits"]
    :pitfalls ["mcp.validate-config reports warnings for missing metadata"
               "apply_patch expects unified diffs"]
    :prerequisites ["Ensure git workspace is clean before applying patches"]}}}

 :outputs
 [{:schema :promethean.json :path "/home/err/devel/promethean/promethean.mcp.json"}
  {:schema :claude-code.json :path "/home/err/devel/promethean/.mcp.json"}
  {:schema :codex.toml  :path "/home/err/.codex/config.toml"}
  {:schema :vscode.json :path "/home/err/.config/User/mcp.json"
   :opts {:include-inputs? true}}
  {:schema :codex.json :path "/home/err/.codeium/windsurf/mcp_config.json"}

  ;; Oterm
  {:schema :codex.json :path "/home/err/.local/share/oterm/config.json"}

  ;; Emacs MCP package
  ;; doesn't work right.
  ;; we added a thing to parse emacs code with tree sitter to directly manipulate the
  ;; s-expressions instead of  handling strings.
  ;; we should use it.
  {:schema :elisp       :path "/home/err/devel/promethean/.emacs/layers/llm/config.el"}]}
